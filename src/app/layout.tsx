import Header from "./components/Header";
import Layout from "./components/Layout";
import "./css/globals.css";
import type { Metadata } from "next";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import Footer from "./components/Footer";
import BottomNavigation from "./components/BottomNavigation";
import { getServerSession } from "next-auth";
import { options } from "./api/auth/[...nextauth]/options";
import { LayoutProvider } from "./LayoutProvider";
import { headers } from "next/headers";
import { ShopDataProvider } from "./components/shop/ShopContext";
import HeaderFront from "./components/HeaderFront";
import LayoutWeb from "./components/landingpage/Layout";
import FooterWeb from "@/components/landingpage/FooterWeb";
import LayoutCustom from "./components/LayoutCustom";

export const metadata: Metadata = {
  title: "My Smart Shop ",
  description: "Generated by create next shop",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // const sessionServer = await getServerSession(options);
  // const token = sessionServer?.bearer;
  // const res = await fetch("http://127.0.0.1:8000/api/user/profile", {
  //   headers: {
  //     "Content-Type": "application/json",
  //     Authorization: `Bearer ${token}`,
  //   },
  // });
  // const data = await res.json();
  // console.log(process.env.GITHUB_ID!);

  /** */
  const headersList = headers();
  const domain = headersList.get("host") || "";
  const fullUrl = headersList.get("referer") || "";
  const [, pathname] =
    fullUrl.match(new RegExp(`https?:\/\/${domain}(.*)`)) || [];
  // console.log(pathname);
  // console.log(domain);

  /**
   <Provider store={store}>
      <PersistGate persistor={persistor}>
        <SessionProvider>
          <UserDataProvider>{children}</UserDataProvider>
        </SessionProvider>
      </PersistGate>
    </Provider>
    
   */
  if (process.env.LANDING_PAGE?.includes(domain)) {
    return (
      <html lang="en">
        <body className="font-bodyFont w-full bg-main-bg text-darkText ">
          <LayoutProvider>
            <ShopDataProvider domain={domain}>
              <LayoutWeb>{children}</LayoutWeb>
            </ShopDataProvider>
          </LayoutProvider>
        </body>
      </html>
    );
  } else {
    return (
      <html lang="en">
        <body className="font-bodyFont w-full bg-main-bg text-darkText ">
          <LayoutProvider>
            <ShopDataProvider domain={domain}>
              <Layout>
                <LayoutCustom>{children}</LayoutCustom>
              </Layout>
            </ShopDataProvider>
          </LayoutProvider>
        </body>
      </html>
    );
  }
}
